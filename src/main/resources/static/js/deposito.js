// deposito.js

// Endere√ßos
const USDT_ADDRESS = "0x55d398326f99059fF775485246999027B3197955";
const PLATFORM_RECEIVER = "0xbc398989648b4b8e986f69c16a93889e83269e85";
                         //   MEXC

// ABI do contrato
const USDT_ABI = [
  "function transfer(address to, uint amount) public returns (bool)",
  "function allowance(address owner, address spender) public view returns (uint)",
  "function approve(address spender, uint amount) public returns (bool)",
  "function decimals() view returns (uint8)",
  "function balanceOf(address owner) public view returns (uint256)"
];

async function depositUSDT(amount) {
  try {
    const usdt = new ethers.Contract(USDT_ADDRESS, USDT_ABI, signer);
    const decimals = await usdt.decimals();
    const amountInWei = ethers.utils.parseUnits(amount.toString(), decimals);

    const balance = await usdt.balanceOf(userAccount);
    if (balance.lt(amountInWei)) {
      status.innerText = "‚ùå Saldo insuficiente de USDT para este dep√≥sito.";
	  Swal.fire({
	    icon: 'error',
	    title: 'Saldo Insuficiente!',
	    text: '‚ùå Saldo insuficiente de USDT para este dep√≥sito.',
	    confirmButtonText: 'Entendi',
	    background: '#fff',
	    color: '#000'
	  });
	  
      return;
    }

    status.innerText = "‚è≥ Enviando transa√ß√£o...";
	Swal.fire({
	  title: '‚è≥ Enviando transa√ß√£o...',
	  text: 'Por favor, aguarde.',
	  allowOutsideClick: false,
	  allowEscapeKey: false,
	  showConfirmButton: false,
	  background: '#fff',
	  color: '#000',
	  didOpen: () => {
	    Swal.showLoading();

	    // Fecha o Swal automaticamente ap√≥s 30 segundos
	    setTimeout(() => {
	      Swal.close();
	      Swal.fire({
	        icon: 'error',
	        title: 'Tempo esgotado',
	        text: 'A transa√ß√£o demorou muito para ser confirmada ou foi cancelada.',
	        timer: 4000,
	        timerProgressBar: true,
	        showConfirmButton: false,
	        background: '#fff',
	        color: '#000'
	      });
	    }, 30000); // 30000 ms = 30 segundos
	  }
	});


    const tx = await usdt.transfer(PLATFORM_RECEIVER, amountInWei);
    status.innerText = "‚è≥ Transa√ß√£o enviada. Aguardando confirma√ß√£o...";
	Swal.fire({
	  title: '‚è≥ Transa√ß√£o enviada',
	  text: 'Aguardando confirma√ß√£o...',
	  allowOutsideClick: false,
	  allowEscapeKey: false,
	  showConfirmButton: false,
	  didOpen: () => {
	    Swal.showLoading();
	  },
	  background: '#fff',
	  color: '#000'
	});
	
    const receipt = await tx.wait();
    const userId = getUsuarioLogadoId();

    if (receipt.status === 1) {
      status.innerText = "‚úÖ Dep√≥sito confirmado com sucesso!";
	  
	  // Fecha o alerta de carregamento
	  Swal.close();
	  Swal.fire({
	    icon: 'success',
	    title: 'Dep√≥sito Confirmado!',
	    text: '‚úÖ Dep√≥sito confirmado com sucesso!',
	    timer: 3000,
	    timerProgressBar: true,
	    showConfirmButton: false,
	    background: '#fff',
	    color: '#000'
		

	  });
   
	  
      await fetch('/api/depositos/fazer', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: userId,
          valor: amount,
          confirmado: true
        })
      });

    } else {
      status.innerText = "‚ùå Transa√ß√£o rejeitada ou falhou.";
	
	  Swal.fire({
	    icon: 'error',
	    title: '‚ùå Transa√ß√£o falhou',
	    text: 'Transa√ß√£o rejeitada ou falhou.',
	    confirmButtonText: 'OK',
	    background: '#fff',
	    color: '#000'
	  });

    }

  } catch (err) {
    console.error("Erro detalhado:", err);
    if (err.code === "UNPREDICTABLE_GAS_LIMIT") {
      status.innerText = "‚ùå Erro: Transa√ß√£o pode falhar. Verifique se voc√™ tem saldo suficiente ou tente um valor menor.";
    } else if (err.code === "CALL_EXCEPTION") {
      status.innerText = "‚ùå Erro: A chamada foi revertida. Isso pode acontecer por falta de permiss√£o ou saldo.";
    } else {
      status.innerText = "‚ùå Erro ao fazer dep√≥sito: " + (err.reason || err.message);
	  
    }
  }
}

function withdraw(amount) {
  status.innerText = `üì§ Saque de ${amount} USDT solicitado. Esta fun√ß√£o ser√° implementada em breve.`;
}

// Formul√°rio de dep√≥sito
document.getElementById('depositForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  if (!userAccount) {
    status.innerText = "‚ö†Ô∏è Conecte sua carteira MetaMask antes.";
	Swal.fire({
		  icon: 'warning',
		  title: '‚ö†Ô∏è Carteira n√£o conectada',
		  text: 'Conecte sua carteira MetaMask antes de continuar.',
		  confirmButtonText: 'OK',
		  background: '#fff',
		  color: '#000'
		});
    return;
  }

  const amount = parseFloat(document.getElementById('depositAmount').value);
  if (isNaN(amount) || amount < 3) {
    status.innerText = "‚ö†Ô∏è O valor m√≠nimo para dep√≥sito √© 3 USDT.";
    return;
  }

  await depositUSDT(amount);
});

// Formul√°rio de saque
document.getElementById('withdrawForm').addEventListener('submit', (e) => {
  e.preventDefault();
  if (!userAccount) {
    status.innerText = "‚ö†Ô∏è Conecte sua carteira MetaMask antes.";
	
	Swal.fire({
	  icon: 'warning',
	  title: '‚ö†Ô∏è Carteira n√£o conectada',
	  text: 'Conecte sua carteira MetaMask antes de continuar.',
	  confirmButtonText: 'OK',
	  background: '#fff',
	  color: '#000'
	});

    return;
  }

  const amount = parseFloat(document.getElementById('withdrawAmount').value);
  withdraw(amount);
});

// Fun√ß√£o auxiliar
function getUsuarioLogadoId() {
  const meta = document.querySelector('meta[name="user-id"]');
  return meta ? parseInt(meta.getAttribute('content')) : null;
}
